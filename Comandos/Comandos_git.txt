usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

A partir de git-novice-es:

git config --global user.name (configurar nombre de usuario)

git config --global user.email (configurar email)

git config --global core.autocrlf input (configurar saltos de linea)

git config --global core.editor "nano -w"
o git config --global core.editor "vim" (configurar editor de texto preferido)

git config --list (listar las configuraciones)

git config -h (acceder a la lista de comandos)

git config --help (acceder al manual de Git)

git init (inicia un repositorio git en un directorio)

git status (revisar el estado del proyecto; si hay cambios sin guardar)

git log (muestra un registro cronologicamente inverso de todos los commits)

git log --oneline (utiliza una sola linea para cada commit)

git log --oneline --graph --all --decorate (combinación útil)

git log -N (limitar el número de commits que Git lista usando -N, donde N es el número de commits que quieres ver. )

git add (agrega un archivo al escenario)

git add <directory-with-files> (agrega un directorio al escenario)

git commit (guarda una copia de todo lo que se colocó en el escenario)

git commit --all (guarda una copia de todo lo que se modoficó luego del último commit)

git diff (diferencias entre el estado actual del archivo y la versión guardada más reciente:)

git diff HEAD~N nombre_de_archivo (ver las diferencias entre commits anteriores)

git diff --staged (diferencia entre el último cambio que sí hizo commit y lo que está en el staging area)

git diff --color-words (resalta las palabras modificadas usando colores)

git commit --author="Nombre <Email>" (nombrar a alguien más como el author)

git log --format=full (ver el author y el committer de los últimos commits)

git checkout HEAD (borra todos los cambios realizados luego del ultimo commit)

git checkout identificador de commit (borra todos los cambios realizados luego de un commit al cual nos referimos con su identificador)

git checkout -f master mars.txt (volver a poner las cosas tal como estaban antes de haber usado checkout)

